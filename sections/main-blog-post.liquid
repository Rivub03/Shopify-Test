

<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<div class="section color-{{ section.settings.color_scheme }}">
  <div
    class="
      spacing-style
      layout-panel-flex
      layout-panel-flex--column
      section-content-wrapper
      mobile-column
    "
    style="
      {% render 'layout-panel-style', settings: section.settings %}
      {% render 'spacing-style', settings: section.settings %}
    "
  >
    <header>
      {%- content_for 'block', id: 'blog-post-title', type: 'text' %}
      {%- content_for 'block', id: 'blog-post-details', type: '_blog-post-info-text' %}
    </header>

    {%- if article.image -%}
      {%- content_for 'block', id: 'blog-post-image', type: '_blog-post-featured-image', image: article.image %}
    {%- endif -%}
   {%- content_for 'block', id: 'blog-post-content', type: '_blog-post-content' %}

<!-- ============================= -->
<!-- Bideshi Custom Multimedia Layer -->
<!-- ============================= -->

<style>
  /*     Bideshi Custom Multimedia Layer CSS (UPDATED FOR INLINE/RESPONSIVE) 
  */
  
  /* 1. Generic Media Figure Styling */
  .article-content figure {
    margin: 2.5rem auto; /* Vertical space for media blocks */
    max-width: 100%;
  }
  
  .article-content figcaption {
    font-style: italic;
    font-size: 0.875rem;
    color: rgba(0,0,0,0.6);
    margin-top: 0.8rem;
    text-align: left; /* Captions align to the left */
    padding: 0 10px;
  }
  
  /* 2. Fluid Images and Audio */
  .article-content img,
  .article-content video,
  .article-content audio {
    display: block;
    width: 100%;
    max-width: 100%;
    height: auto;
    border-radius: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
  
  /* Audio player can't use box-shadow well, so we remove it. */
  .article-content audio {
    box-shadow: none;
    margin: 1.5rem auto;
  }

  /* 3. The Responsive Aspect Ratio Hack (CRITICAL for videos/iframes) */
  .video-container-wrapper {
    position: relative; 
    width: 100%;
    height: 0;
    /* Forces a 16:9 aspect ratio regardless of container width */
    padding-bottom: 56.25%; 
    margin-bottom: 0.5em; 
  }

  /* Make the video/iframe fill the wrapper */
  .video-container-wrapper iframe,
  .video-container-wrapper video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    border-radius: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
</style>
{% comment %}
  ==============================================================
  INLINE MEDIA INJECTION LOGIC
  - This block processes all metafield media and replaces the markers
  - The processed content is stored in the 'processed_content' variable
  ==============================================================
{% endcomment %}

{% liquid 
  assign processed_content = article.content
  assign marker_index = 0
  assign media_html = ''
%}

{% comment %}
  -------------------------------------------------------------
  1. Process Images: Marker Format [IMG_1], [IMG_2], etc.
  -------------------------------------------------------------
{% endcomment %}
{%- assign media_images = article.metafields.custom.media_image.value -%}
{%- if media_images -%}
  {%- for image in media_images -%}
    {%- liquid
      assign marker_index = forloop.index
      assign marker = '[IMG_' | append: marker_index | append: ']'
      
      # Build the image HTML with figure tag
      capture media_html
        echo '<figure>'
        echo image | image_url: width: 1200 | image_tag: loading: 'lazy', alt: article.title
        echo '</figure>'
      endcapture
      
      # Inject the HTML into the content
      assign processed_content = processed_content | replace: marker, media_html
    -%}
  {%- endfor -%}
{%- endif -%}

{% comment %}
  -------------------------------------------------------------
  2. Process Uploaded Videos: Marker Format [VID_1], [VID_2], etc.
  -------------------------------------------------------------
{% endcomment %}
{%- assign media_videos = article.metafields.custom.media_video.value -%}
{%- if media_videos -%}
  {%- for video in media_videos -%}
    {%- liquid
      assign marker_index = forloop.index
      assign marker = '[VID_' | append: marker_index | append: ']'
      
      # Build the uploaded video HTML, wrapped in the responsive container
      capture media_html
        echo '<figure>'
        echo '<div class="video-container-wrapper">'
        echo video | video_tag: controls: 'controls', preload: "metadata"
        echo '</div>'
        echo '</figure>'
      endcapture
      
      # Inject the HTML into the content
      assign processed_content = processed_content | replace: marker, media_html
    -%}
  {%- endfor -%}
{%- endif -%}

{% comment %}
  -------------------------------------------------------------
  3. Process External Videos: Marker Format [EXT_1], [EXT_2], etc.
  -------------------------------------------------------------
{% endcomment %}
{%- assign media_video_links = article.metafields.custom.media_video_link.value -%}
{%- if media_video_links -%}
  {%- for link in media_video_links -%}
    {%- liquid
      assign marker_index = forloop.index
      assign marker = '[EXT_' | append: marker_index | append: ']'
      
      # FIX: Ensure all filters for embed_link are on a single line for multi-line liquid block
      assign embed_link = link | replace: "watch?v=", "embed/" | replace: "youtu.be/", "youtube.com/embed/" | replace: "&list", "?list"
        
      # Build the iframe HTML, wrapped in the responsive container
      capture media_html
        echo '<figure>'
        echo '<div class="video-container-wrapper">'
        echo '<iframe src="' | append: embed_link | append: '" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>'
        echo '</div>'
        echo '</figure>'
      endcapture
      
      # Inject the HTML into the content
      assign processed_content = processed_content | replace: marker, media_html
    -%}
  {%- endfor -%}
{%- endif -%}

{% comment %}
  -------------------------------------------------------------
  4. Process Audio Files: Marker Format [AUD_1], [AUD_2], etc.
  -------------------------------------------------------------
{% endcomment %}
{%- assign media_audios = article.metafields.custom.media_audio.value -%}
{%- if media_audios -%}
  {%- for audio in media_audios -%}
    {%- liquid
      assign marker_index = forloop.index
      assign marker = '[AUD_' | append: marker_index | append: ']'
      
      # Build the audio HTML
      capture media_html
        echo '<figure>'
        echo '<audio controls preload="none"><source src="' | append: audio.url | append: '" type="' | append: audio.mime_type | default: 'audio/mpeg' | append: '">Your browser does not support the audio element.</audio>'
        echo '</figure>'
      endcapture
      
      # Inject the HTML into the content
      assign processed_content = processed_content | replace: marker, media_html
    -%}
  {%- endfor -%}
{%- endif -%}

{% comment %}
  ==============================================================
  END INLINE MEDIA INJECTION LOGIC
  ==============================================================
{% endcomment %}


    
    {% if blog.comments_enabled? %}
      <div class="blog-post-comments-container">
        <h2 class="h3">{{- 'blogs.article.comments_heading' | t: count: article.comments_count -}}</h2>

        <div class="blog-post-comments">
          {% paginate article.comments by 10 %}
            {% for comment in article.comments %}
              <div class="blog-post-comment">
                {{ comment.content }}
                <div class="blog-post-comment__author">
                  <span class="blog-post-comment__author-name">{{- comment.author -}}</span>
                  <span>{{- 'blogs.article.comment_author_separator' | t -}}</span>
                  <span class="blog-post-comment__date">
                    {{- comment.created_at | time_tag: format: 'date' -}}
                  </span>
                </div>
              </div>
            {% endfor %}

            <div class="blog-post-comments-pagination">
              {{- paginate | default_pagination -}}
            </div>
          {% endpaginate %}
        </div>

        {% render 'blog-comment-form', article: article, section_id: section.id %}
      </div>
    {% endif %}
  </div>
</div>

<script type="application/ld+json">
  {{ article | structured_data }}
</script>

{% stylesheet %}
  .blog-post-comments-container {
    width: 100%;
    max-width: var(--normal-content-width);
    margin: 0 auto;
  }

  .blog-post-comments {
    display: flex;
    flex-direction: column;
    gap: var(--gap-3xl);
  }

  .blog-post-comment__author {
    display: flex;
    align-items: center;
    gap: var(--gap-2xs);
    margin-top: var(--margin-md);
    font-size: var(--font-size--body-sm);
    color: rgb(var(--color-foreground-rgb) / var(--opacity-subdued-text));
  }

  .blog-post-comments-pagination {
    display: flex;
    justify-content: center;
    gap: var(--gap-2xs);
  }

  .blog-post-comments-pagination,
  .blog-post-comments-pagination a {
    color: var(--color-foreground);
  }

  .blog-post-comments-pagination .current {
    color: var(--color-foreground);
  }

  .blog-post-comments-pagination .current,
  .blog-post-comments-pagination a {
    display: block;
    padding: var(--padding-2xs) var(--padding-xs);
  }

  .blog-post-comments-pagination .current,
  .blog-post-comments-pagination a:hover {
    border-bottom: 1px solid var(--color-foreground);
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:names.blog_post",
  "class": "section-wrapper",
  "settings": [
    {
      "type": "select",
      "id": "content_direction",
      "label": "t:settings.direction",
      "options": [
        {
          "value": "column",
          "label": "t:options.vertical"
        }
      ],
      "default": "column",
      "visible_if": "{{ section.settings.gap < 0 }}"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:settings.gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": []
}
{% endschema %}
