

<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<div class="section color-{{ section.settings.color_scheme }}">
  <div
    class="
      spacing-style
      layout-panel-flex
      layout-panel-flex--column
      section-content-wrapper
      mobile-column
    "
    style="
      {% render 'layout-panel-style', settings: section.settings %}
      {% render 'spacing-style', settings: section.settings %}
    "
  >
    <header>
      {%- content_for 'block', id: 'blog-post-title', type: 'text' %}
      {%- content_for 'block', id: 'blog-post-details', type: '_blog-post-info-text' %}
    </header>

    {%- if article.image -%}
      {%- content_for 'block', id: 'blog-post-image', type: '_blog-post-featured-image', image: article.image %}
    {%- endif -%}
    {%- content_for 'block', id: 'blog-post-content', type: '_blog-post-content' %}

<!-- ============================= -->
<!-- Bideshi Custom Multimedia Layer -->
<!-- ============================= -->

<style>
  .article-media {
    margin: 2.5rem 0;
    display: grid;
    gap: 1.75rem;
  }
  .article-media img,
  .article-media video,
  .article-media iframe {
    width: 100%;
    max-width: 100%;
    border-radius: 1rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  }
  .article-media audio {
    width: 100%;
    margin-top: 0.5rem;
  }
  .article-media iframe {
    aspect-ratio: 16 / 9;
  }
  .article-media figcaption {
    font-size: 0.875rem;
    color: rgba(0,0,0,0.6);
    margin-top: 0.4rem;
    text-align: center;
  }
</style>

{%- comment -%}
====================================================
BIDESH I INLINE MEDIA EMBEDDING SYSTEM
Authors can embed uploaded media inline in article text
using tokens like [media:0], [media:1], etc.
====================================================
{%- endcomment -%}

{%- comment -%} Initialize an empty array {%- endcomment -%}
{% assign media_snippets = '' | split: '__EMPTY__' %}

{%- comment -%} 1. IMAGES {%- endcomment -%}
{% assign media_images = article.metafields.custom.media_image.value %}
{% if media_images %}
  {% for img in media_images %}
    {% capture html %}
      <figure class="article-inline-media article-inline-media--image">
        <img src="{{ img | image_url: width: 1200 }}" alt="{{ article.title }}" loading="lazy">
      </figure>
    {% endcapture %}
    {% assign media_snippets = media_snippets | push: html %}
  {% endfor %}
{% endif %}

{%- comment -%} 2. AUDIO {%- endcomment -%}
{% assign media_audios = article.metafields.custom.media_audio.value %}
{% if media_audios %}
  {% for audio in media_audios %}
    {% capture html %}
      <figure class="article-inline-media article-inline-media--audio">
        <audio controls preload="none">
          <source src="{{ audio.url | default: audio | file_url }}" type="{{ audio.mime_type | default: 'audio/mpeg' }}">
          Your browser does not support the audio element.
        </audio>
      </figure>
    {% endcapture %}
    {% assign media_snippets = media_snippets | push: html %}
  {% endfor %}
{% endif %}

{%- comment -%} 3. UPLOADED VIDEOS (Shopify video objects) {%- endcomment -%}
{% assign media_videos = article.metafields.custom.media_video.value %}
{% if media_videos %}
  {% for video in media_videos %}
    {% capture html %}
      <figure class="article-inline-media article-inline-media--video">
        {{ video | video_tag: controls: true, preload: "metadata" }}
      </figure>
    {% endcapture %}
    {% assign media_snippets = media_snippets | push: html %}
  {% endfor %}
{% endif %}

{%- comment -%} 4. EXTERNAL VIDEO LINKS (YouTube/Vimeo) {%- endcomment -%}
{% assign media_video_links = article.metafields.custom.media_video_link.value %}
{% if media_video_links %}
  {% for link in media_video_links %}
    {% assign embed_link = link
      | replace: "watch?v=", "embed/"
      | replace: "youtu.be/", "youtube.com/embed/"
      | replace: "&list", "?list"
    %}
    {% capture html %}
      <figure class="article-inline-media article-inline-media--external-video">
        <iframe
          src="{{ embed_link | escape }}"
          frameborder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowfullscreen
        ></iframe>
      </figure>
    {% endcapture %}
    {% assign media_snippets = media_snippets | push: html %}
  {% endfor %}
{% endif %}

{%- comment -%}
----------------------------------------------------
Convert Liquid array → JSON string (with safe escaping)
----------------------------------------------------
{%- endcomment -%}
{% assign json_snippets = '[' %}
{% for s in media_snippets %}
  {% assign safe_s = s | strip_newlines | escape %}
  {% assign json_snippets = json_snippets | append: '"' | append: safe_s | append: '"' %}
  {% unless forloop.last %}
    {% assign json_snippets = json_snippets | append: ',' %}
  {% endunless %}
{% endfor %}
{% assign json_snippets = json_snippets | append: ']' %}

<script>
  (function () {
    // Wait for DOM ready — this avoids timing issues
    function onReady(fn) {
      if (document.readyState === "complete" || document.readyState === "interactive") {
        setTimeout(fn, 0);
      } else {
        document.addEventListener('DOMContentLoaded', fn);
      }
    }

    onReady(function () {
      // -- 1) read the JSON produced by Liquid (json_snippets)
      var rawFromLiquid = null;
      try {
        rawFromLiquid = {{ json_snippets }};
        // rawFromLiquid should already be a JS array literal produced by Liquid
      } catch (err) {
        console.error('Bideshi inline media: error reading json_snippets from Liquid', err);
      }

      // If rawFromLiquid is a string (unlikely) try JSON.parse
      var raw = [];
      if (Array.isArray(rawFromLiquid)) {
        raw = rawFromLiquid;
      } else if (typeof rawFromLiquid === 'string') {
        try {
          raw = JSON.parse(rawFromLiquid);
        } catch (e) {
          console.warn('Bideshi inline media: json_snippets is string but JSON.parse failed', e, rawFromLiquid);
        }
      }

      console.info('Bideshi inline media: snippets count =', raw.length);

      // Unescape HTML entities produced by Liquid's escape()
      var mediaSnippets = raw.map(function(item) {
        if (typeof item !== 'string') return '';
        return item
          .replace(/&quot;/g, '"')
          .replace(/&lt;/g, '<')
          .replace(/&gt;/g, '>')
          .replace(/&amp;/g, '&');
      }).filter(Boolean);

      if (!mediaSnippets.length) {
        console.info('Bideshi inline media: no media snippets to insert — nothing to do.');
        return;
      }

      // -- 2) find sensible containers (broad set, more than before)
      var selectorList = [
        '.rte',
        '.article__content',
        '.blog-post .rte',
        '.blog-post__content',
        '.article',
        'article',
        '.section-content-wrapper .rte'
      ];
      var containers = [];
      selectorList.forEach(function(sel) {
        document.querySelectorAll(sel).forEach(function(el) {
          if (containers.indexOf(el) === -1) containers.push(el);
        });
      });

      console.info('Bideshi inline media: containers found =', containers.length, containers);

      if (!containers.length) {
        console.warn('Bideshi inline media: no article containers found; adjust selectors if needed.');
        return;
      }

      var tokenRe = /\[media:(\d+)\]/g;

      function replaceInNode(node) {
        if (node.nodeType === Node.TEXT_NODE) {
          var text = node.nodeValue;
          tokenRe.lastIndex = 0;
          var match, lastIndex = 0, hasToken = false;
          var frag = document.createDocumentFragment();

          while ((match = tokenRe.exec(text)) !== null) {
            hasToken = true;
            var idx = parseInt(match[1], 10);
            var before = text.slice(lastIndex, match.index);
            if (before) frag.appendChild(document.createTextNode(before));

            if (!isNaN(idx) && mediaSnippets[idx]) {
              var wrapper = document.createElement('div');
              wrapper.innerHTML = mediaSnippets[idx];
              while (wrapper.firstChild) frag.appendChild(wrapper.firstChild);
            } else {
              frag.appendChild(document.createTextNode(match[0]));
            }
            lastIndex = tokenRe.lastIndex;
          }

          if (!hasToken) return false;
          var after = text.slice(lastIndex);
          if (after) frag.appendChild(document.createTextNode(after));
          node.parentNode.replaceChild(frag, node);
          return true;
        } else if (node.nodeType === Node.ELEMENT_NODE && node.tagName !== 'SCRIPT' && node.tagName !== 'STYLE') {
          // Walk children snapshot to avoid live NodeList issues
          var children = Array.prototype.slice.call(node.childNodes);
          for (var i = 0; i < children.length; i++) replaceInNode(children[i]);
        }
        return false;
      }

      // Run replacement on each container
      var replacedAny = false;
      containers.forEach(function(container) {
        try {
          var r = replaceInNode(container);
          if (r) replacedAny = true;
        } catch (e) {
          console.error('Bideshi inline media: error replacing in container', e, container);
        }
      });

      if (replacedAny) {
        console.info('Bideshi inline media: token replacement performed.');
        var fallback = document.querySelector('.article-media-fallback');
        if (fallback) fallback.style.display = 'none';
      } else {
        console.info('Bideshi inline media: no token occurrences found in selected containers.');
      }

    }); // onReady
  })();
</script>
{%- comment -%} End of Bideshi Custom Multimedia Layer {%- endcomment -%}


    
    {% if blog.comments_enabled? %}
      <div class="blog-post-comments-container">
        <h2 class="h3">{{- 'blogs.article.comments_heading' | t: count: article.comments_count -}}</h2>

        <div class="blog-post-comments">
          {% paginate article.comments by 10 %}
            {% for comment in article.comments %}
              <div class="blog-post-comment">
                {{ comment.content }}
                <div class="blog-post-comment__author">
                  <span class="blog-post-comment__author-name">{{- comment.author -}}</span>
                  <span>{{- 'blogs.article.comment_author_separator' | t -}}</span>
                  <span class="blog-post-comment__date">
                    {{- comment.created_at | time_tag: format: 'date' -}}
                  </span>
                </div>
              </div>
            {% endfor %}

            <div class="blog-post-comments-pagination">
              {{- paginate | default_pagination -}}
            </div>
          {% endpaginate %}
        </div>

        {% render 'blog-comment-form', article: article, section_id: section.id %}
      </div>
    {% endif %}
  </div>
</div>

<script type="application/ld+json">
  {{ article | structured_data }}
</script>

{% stylesheet %}
  .blog-post-comments-container {
    width: 100%;
    max-width: var(--normal-content-width);
    margin: 0 auto;
  }

  .blog-post-comments {
    display: flex;
    flex-direction: column;
    gap: var(--gap-3xl);
  }

  .blog-post-comment__author {
    display: flex;
    align-items: center;
    gap: var(--gap-2xs);
    margin-top: var(--margin-md);
    font-size: var(--font-size--body-sm);
    color: rgb(var(--color-foreground-rgb) / var(--opacity-subdued-text));
  }

  .blog-post-comments-pagination {
    display: flex;
    justify-content: center;
    gap: var(--gap-2xs);
  }

  .blog-post-comments-pagination,
  .blog-post-comments-pagination a {
    color: var(--color-foreground);
  }

  .blog-post-comments-pagination .current {
    color: var(--color-foreground);
  }

  .blog-post-comments-pagination .current,
  .blog-post-comments-pagination a {
    display: block;
    padding: var(--padding-2xs) var(--padding-xs);
  }

  .blog-post-comments-pagination .current,
  .blog-post-comments-pagination a:hover {
    border-bottom: 1px solid var(--color-foreground);
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:names.blog_post",
  "class": "section-wrapper",
  "settings": [
    {
      "type": "select",
      "id": "content_direction",
      "label": "t:settings.direction",
      "options": [
        {
          "value": "column",
          "label": "t:options.vertical"
        }
      ],
      "default": "column",
      "visible_if": "{{ section.settings.gap < 0 }}"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:settings.gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": []
}
{% endschema %}
